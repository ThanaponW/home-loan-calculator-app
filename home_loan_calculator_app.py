import streamlit as st
import pandas as pd # Import pandas library

# Configure Streamlit page settings
st.set_page_config(
    page_title="‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢ (Home Loan Calculator)",
    page_icon="üè°",
    layout="centered", # Set layout to centered for better mobile display
    initial_sidebar_state="collapsed"
)

# Apply custom CSS for a light gray background color and black text color
st.markdown(
    """
    <style>
    .stApp {
        background-color: #F0F0F0; /* Light gray background color */
        color: #333333; /* Dark gray/near black for general text */
    }
    /* Ensure all text elements are dark for contrast */
    h1, h2, h3, h4, h5, h6, p, div, span, label {
        color: #333333;
    }
    .stMarkdown, .stText {
        color: #333333;
    }
    /* Adjust specific Streamlit components if needed for text color */
    .stNumberInput, .stSelectbox, .stTextInput {
        color: #333333; /* Ensure input text is also dark */
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Set the main title of the application
st.title("üè° ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢ (Home Loan Calculator) üíñ")

# Greeting and explanation text
st.write("‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢ (Welcome to the Home Loan Calculator)")
st.write("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞ (Please fill in the information to calculate monthly payments and view amortization details)")

# --- Input section for loan details ---
st.header("‚ú® ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠ (Loan Information) ‚ú®")

# Use st.container to group input fields for better organization
with st.container(border=True):
    # Input field for home price
    home_price = st.number_input(
        "üè† ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô (Home Price) (USD):",
        min_value=10000.0,
        max_value=10000000.0,
        value=250000.0, # Default value for home price
        step=1000.0,
        format="%.2f",
        help="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢ (Purchase price of the residence)"
    )

    # Input field for down payment
    down_payment = st.number_input(
        "üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå (Down Payment) (USD):",
        min_value=0.0,
        max_value=10000000.0,
        value=50000.0, # Default value for down payment
        step=1000.0,
        format="%.2f",
        help="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞ (Amount of down payment made)"
    )

    # Input field for annual interest rate
    interest_rate_annual = st.number_input(
        "üìä ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ï‡πà‡∏≠‡∏õ‡∏µ (Annual Interest Rate) (%):",
        min_value=0.1,
        max_value=20.0,
        value=4.5, # Default value
        step=0.1,
        format="%.2f",
        help="‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ï‡πà‡∏≠‡∏õ‡∏µ (‡πÄ‡∏ä‡πà‡∏ô 4.5 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 4.5%) (Annual interest rate, e.g., 4.5 for 4.5%)"
    )

    # Input field for loan term in years
    loan_term_years = st.number_input(
        "üóìÔ∏è ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≠‡∏ô (Loan Term) (‡∏õ‡∏µ/Years):",
        min_value=1,
        max_value=50,
        value=30, # Default value
        step=1,
        help="‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏µ (Total repayment period in years)"
    )

    # Input field for additional principal payment per month
    additional_principal_payment = st.number_input(
        "üí∏ ‡∏¢‡∏≠‡∏î‡πÇ‡∏õ‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (Additional Principal Payment per Month) (USD):",
        min_value=0.0,
        value=0.0, # Default to 0
        step=10.0,
        format="%.2f",
        help="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏á‡∏ß‡∏î (Amount of additional principal to pay each installment)"
    )

    # Input field for annual property tax
    annual_property_tax = st.number_input(
        "üè° ‡∏†‡∏≤‡∏©‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏£‡∏≤‡∏¢‡∏õ‡∏µ (Annual Property Tax) (USD):",
        min_value=0.0,
        value=3000.0, # Default value
        step=100.0,
        format="%.2f",
        help="‡∏†‡∏≤‡∏©‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡∏ï‡πà‡∏≠‡∏õ‡∏µ (Property tax payable per year)"
    )

    # Input field for annual home insurance
    annual_home_insurance = st.number_input(
        "üõ°Ô∏è ‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏õ‡∏µ (Annual Home Insurance) (USD):",
        min_value=0.0,
        value=1200.0, # Default value
        step=50.0,
        format="%.2f",
        help="‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡∏ï‡πà‡∏≠‡∏õ‡∏µ (Home insurance premium payable per year)"
    )

    # Input field for annual mortgage insurance
    annual_mortgage_insurance = st.number_input(
        "üí≤ ‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏£‡∏≤‡∏¢‡∏õ‡∏µ (Annual Mortgage Insurance) (USD):",
        min_value=0.0,
        value=0.0, # Default to 0 as it's not always required
        step=10.0,
        format="%.2f",
        help="‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡∏ï‡πà‡∏≠‡∏õ‡∏µ (Mortgage insurance payable per year)"
    )

# --- Calculate button ---
st.write("") # Add a small vertical space
if st.button("‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞ (Calculate Payment) ‚ú®", use_container_width=True, type="primary"):
    # Calculate actual loan amount from home price and down payment
    calculated_loan_amount = home_price - down_payment

    # Input validation
    if home_price <= 0 or down_payment < 0 or calculated_loan_amount <= 0 or interest_rate_annual < 0 or loan_term_years <= 0:
        st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏ß‡∏Å ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå (Please enter valid and positive loan information. Ensure home price is greater than down payment.)")
    elif annual_property_tax < 0 or annual_home_insurance < 0 or annual_mortgage_insurance < 0:
        st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢, ‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ö‡πâ‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏ß‡∏Å (Please enter valid and positive property tax, home insurance, and mortgage insurance amounts.)")
    else:
        # Convert annual interest rate to monthly rate
        monthly_interest_rate = (interest_rate_annual / 100) / 12
        # Calculate total number of payments in months
        number_of_payments = loan_term_years * 12

        # --- Formula for base monthly loan payment (excluding tax/insurance) ---
        # Formula: M = P [ i(1 + i)^n ] / [ (1 + i)^n ‚Äì 1]
        # Where:
        # M = Monthly Payment
        # P = Principal Loan Amount
        # i = Monthly Interest Rate
        # n = Total Number of Payments (months)

        if monthly_interest_rate == 0: # Handle 0% interest rate
            monthly_payment_base = calculated_loan_amount / number_of_payments
        else:
            monthly_payment_base = calculated_loan_amount * (monthly_interest_rate * (1 + monthly_interest_rate)**number_of_payments) / \
                              ((1 + monthly_interest_rate)**number_of_payments - 1)

        # --- Calculate original total interest paid (without additional principal payments) ---
        original_remaining_balance = calculated_loan_amount
        total_interest_paid_original = 0.0
        for _ in range(number_of_payments):
            if original_remaining_balance <= 0:
                break
            interest_for_month_original = original_remaining_balance * monthly_interest_rate
            total_interest_paid_original += interest_for_month_original
            principal_for_month_original = monthly_payment_base - interest_for_month_original
            original_remaining_balance -= principal_for_month_original
            if original_remaining_balance < 0: # Adjust for the final payment
                original_remaining_balance = 0

        # --- Calculate additional monthly expenses ---
        monthly_property_tax = annual_property_tax / 12
        monthly_home_insurance = annual_home_insurance / 12
        monthly_mortgage_insurance = annual_mortgage_insurance / 12 # Monthly mortgage insurance
        total_additional_monthly_cost = monthly_property_tax + monthly_home_insurance + monthly_mortgage_insurance # Include MI

        # --- Display calculation results ---
        st.header("üíñ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì (Calculation Results) üíñ")
        st.success(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ (‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå) (Loan Amount after Down Payment): **${calculated_loan_amount:,.2f} USD**") # Display calculated loan amount
        st.success(f"‡∏¢‡∏≠‡∏î‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢) (Monthly Payment (Principal & Interest)): **${monthly_payment_base:,.2f} USD**") # Clarified this label
        st.info(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏ß‡∏î‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏î‡∏¥‡∏°) (Total Number of Payments (Original)): {number_of_payments} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (Months)")

        # Display monthly breakdown of additional costs
        st.write(f"‡∏†‡∏≤‡∏©‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (Monthly Property Tax): **${monthly_property_tax:,.2f} USD**")
        st.write(f"‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (Monthly Home Insurance): **${monthly_home_insurance:,.2f} USD**")
        st.write(f"‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (Monthly Mortgage Insurance): **${monthly_mortgage_insurance:,.2f} USD**")
        st.markdown(f"## ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (Total Monthly Payment): **${monthly_payment_base + total_additional_monthly_cost:,.2f} USD**")

        # --- Generate and display amortization table ---
        st.header("üìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞ (‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡πÇ‡∏õ‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°) (Amortization Details (with Additional Principal)) üìä")

        amortization_data = []
        remaining_balance = calculated_loan_amount # Start with calculated loan amount
        total_interest_paid_with_additional = 0.0
        actual_payments_made = 0

        for month in range(1, number_of_payments + 1):
            if remaining_balance <= 0: # Break if loan is paid off
                break

            actual_payments_made += 1

            # Calculate interest for the current month
            interest_for_month = remaining_balance * monthly_interest_rate
            total_interest_paid_with_additional += interest_for_month

            # Calculate principal paid from the base payment
            principal_from_base_payment = monthly_payment_base - interest_for_month

            # Calculate total principal paid this month (from base payment + additional payment)
            principal_paid_this_month = principal_from_base_payment + additional_principal_payment

            # Adjust principal payment for the final installment precisely
            if remaining_balance < principal_paid_this_month:
                principal_paid_this_month = remaining_balance

            # Calculate new remaining balance
            remaining_balance -= principal_paid_this_month

            amortization_data.append({
                "‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà (Installment)": month,
                "‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô) (Beginning Balance)": f"{remaining_balance + principal_paid_this_month:,.2f}",
                "‡∏¢‡∏≠‡∏î‡∏ú‡πà‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô+‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢) (Monthly Payment (P&I))": f"{monthly_payment_base:,.2f}", # Only P&I
                "‡∏¢‡∏≠‡∏î‡πÇ‡∏õ‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° (Additional Principal)": f"{additional_principal_payment:,.2f}", # Separate column for additional principal
                "‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢ (Interest Paid)": f"{interest_for_month:,.2f}",
                "‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢ (Principal Paid)": f"{principal_paid_this_month:,.2f}",
                "‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î) (Ending Balance)": f"{max(0, remaining_balance):,.2f}", # Ensure balance doesn't go negative
                "‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠ (Mortgage Insurance)": f"{monthly_mortgage_insurance:,.2f}" # Separate column for MI
            })

        # Use st.expander to initially hide the table, preventing a long page on mobile
        with st.expander("‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞ (Click to view Amortization Table)"):
            df_amortization = pd.DataFrame(amortization_data)
            st.dataframe(df_amortization, use_container_width=True) # Streamlit displays an interactive table

        st.write("") # Add a small vertical space
        if actual_payments_made < number_of_payments:
            st.success(f"‡∏¢‡∏≠‡∏î‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏°‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô: **{actual_payments_made} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô** (‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÑ‡∏õ {number_of_payments - actual_payments_made} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô!) (Loan paid off in: **{actual_payments_made} months** (Saved {number_of_payments - actual_payments_made} months!)) üéâ")
        else:
            st.info("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏õ‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏õ‡∏∞‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≠‡∏ô‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏° (No additional principal payment made, or loan term remains the same.)")

        # Calculate interest saved
        interest_saved = total_interest_paid_original - total_interest_paid_with_additional
        if interest_saved > 0:
            st.success(f"‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡πÑ‡∏õ‡πÑ‡∏î‡πâ: **${interest_saved:,.2f} USD** ‡∏Ñ‡πà‡∏∞! ‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÑ‡∏õ‡πÄ‡∏•‡∏¢! (Interest Saved: **${interest_saved:,.2f} USD**! Excellent!) üí∏")
        else:
            st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° (No interest saved from additional principal payment.)")

        st.success(f"‡∏£‡∏ß‡∏°‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡∏ï‡∏•‡∏≠‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤ (‡∏£‡∏ß‡∏°‡πÇ‡∏õ‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°) (Total Interest Paid (with Additional Principal)): **${total_interest_paid_with_additional:,.2f} USD**")

st.write("\n")
st.markdown("---")
st.write("‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢: Ikyusung")
